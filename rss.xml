<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peter's Playground</title>
    <link>http://p233.github.com/</link>
    <atom:link href="http://p233.github.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>关于前端方面的资讯分享，经验总结，与深度思考</description>
    <language>zh_CN</language>
    <pubDate>Sun, 20 Jan 2013 16:27:24 +0000</pubDate>
    <lastBuildDate>Sun, 20 Jan 2013 16:27:24 +0000</lastBuildDate>

    
    <item>
      <title>DropboxDiff，对比文件的历史版本</title>
      <link>http://p233.github.com/Mac_OS/2013/01/19/dropbox-diff.html</link>
      <pubDate>19 Jan 2013</pubDate>
      <author>40132147@qq.com (Peter)</author>
      <guid>http://p233.github.com/Mac_OS/2013/01/19/dropbox-diff</guid>
      <description>&lt;p&gt;写 HTML, CSS, Javascript，当修改幅度比较大时，偶尔会想查看之前的版本，使用版本控制系统 (SVN) 好像有点大材小用，毕竟不是多人协作，也不是太复杂的项目。所以，我一般将文件存放在 Dropbox 下，保存文件时 Dropbox 会自动备份历史版本，需要恢复或对比的时候，就可以在 Dropbox 网站查看历史记录。但是，仅仅这样还不够方便，借助 &lt;a href='http://blog.vicshih.com/2011/09/dropboxdiff-chrome-extension.html' target='_blank'&gt;DropboxDiff&lt;/a&gt; 这款 Chrome 插件，我们可以直接对比两个文件的具体区别，好像版本控制软件那样。&lt;/p&gt;

&lt;p&gt;Chrome Web Store 中搜索 &lt;code&gt;DropboxDiff&lt;/code&gt; (Extensions) 并安装，之后，查看历史版本的时候，每个条目的后面会自动添加两个单选框。选择需要对比的文件，然后按下 “Diff” 按钮就可以启用预设的软件对比两个文件。&lt;/p&gt;
&lt;a href='/images/dropboxdiff/img1.png' target='_blank' class='img'&gt;&lt;img alt='dropboxdiff' src='/images/dropboxdiff/img1.png' /&gt;&lt;/a&gt;
&lt;p&gt;第一次使用时，需要先设置对比软件 (diff tool)，比如作者推荐的 &lt;a href='http://kdiff3.sourceforge.net/' target='_blank'&gt;kdiff3&lt;/a&gt;，Xcode 自带的 FileMerge，或者其他可用命令行操作的软件（好像不支持 Kaleidoscope ?），输入执行命令，再保存即可。&lt;/p&gt;
&lt;a href='/images/dropboxdiff/img2.png' target='_blank' class='img'&gt;&lt;img alt='dropboxdiff setting' src='/images/dropboxdiff/img2.png' /&gt;&lt;/a&gt;
&lt;p&gt;FileMerge 的命令是 &lt;code&gt;opendiff file1 file2&lt;/code&gt;，如果在使用时遇到了路径错误，试试下面的解决办法：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;引用 &lt;a href='http://stackoverflow.com/questions/9300748/opendiff-does-not-start-anymore' target='_blank'&gt;StackOverflow&lt;/a&gt; 上 Valexa 的解释：That is because with 4.3 /Developer/ moved to /Applications/Xcode.app/Contents/Developer/ . The proper setting for the new path is: &lt;code&gt;sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href='/images/dropboxdiff/img3.png' target='_blank' class='img'&gt;&lt;img alt='FileMerge' src='/images/dropboxdiff/img3.png' /&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;这是我的 Dropbox 推广链接 &lt;a href='http://db.tt/dKXdR3gf' target='_blank'&gt;http://db.tt/dKXdR3gf&lt;/a&gt;，通过这个链接注册 Dropbox 账户，我们每个人都可以获得额外的 500MB 空间 :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; Sublime Text 2 用户也可以试试 &lt;a href='https://github.com/vishr/local-history' target='_blank'&gt;Local History&lt;/a&gt; 插件，在本地保存、管理文件的历史记录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jekyll Alfred Extensions</title>
      <link>http://p233.github.com/Mac_OS/2013/01/08/jekyll-alfred-extensions.html</link>
      <pubDate>08 Jan 2013</pubDate>
      <author>40132147@qq.com (Peter)</author>
      <guid>http://p233.github.com/Mac_OS/2013/01/08/jekyll-alfred-extensions</guid>
      <description>&lt;p&gt;三个 Alfred Extensions 让 Jekyll 用起来更方便：Create a Jekyll Post, Generate Jekyll site, 以及 Push Jekyll post to Github。可以直接从 &lt;a href='https://github.com/P233/Jekyll-Alfred-Extensions' target='_blank'&gt;Github&lt;/a&gt; 下载，或者根据下面的代码自己创建。&lt;/p&gt;

&lt;h3 id='create_a_jekyll_post'&gt;Create a Jekyll Post&lt;/h3&gt;

&lt;p&gt;快速创建一篇 Jekyll 文章。下载后双击安装，在 Alfred 管理面板中右键选择 “Show in Finder”，打开 new_post.rb 文件，然后添加你自己的 _posts 文件夹路径，格式必须以 &lt;code&gt;/Users/user_name/&lt;/code&gt; 开头。创建新文章时，在 Alfred 中输入 &lt;code&gt;post&lt;/code&gt; 与文件名，文件名中的空格请用 &lt;code&gt;-&lt;/code&gt; 代替。以下是 ruby 源码：&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;# Please replace your own _posts folder path in the next line. The format should start with /Users/user_name/
Dir.chdir &amp;quot;/Users/lpw/Dropbox/Websites/Jekyll/_posts/&amp;quot;

today = Time.now.strftime('%Y-%m-%d')
input = ARGV[0]

filename = [today, input].join('-')
extension = 'md'
	
file = [filename, extension].join('.')

system(%[touch &amp;quot;#{file}&amp;quot;])
system(%[open &amp;quot;#{file}&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='generate_jekyll_site'&gt;Generate Jekyll site&lt;/h3&gt;

&lt;p&gt;通过 AppleScript 在 Terminal 中自动运行 &lt;code&gt;cd&lt;/code&gt; 与 &lt;code&gt;jekyll --server --auto&lt;/code&gt; 两个命令，然后在浏览器中访问网站，不要忘记替换成自己的 Jekyll 文件夹的路径。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;tell application &amp;quot;Terminal&amp;quot;
    activate
    if (count of windows) is 0 then
        set currentTab to do script &amp;quot;cd ~/dropbox/websites/jekyll/&amp;quot;
    else
        do script &amp;quot;cd ~/dropbox/websites/jekyll/&amp;quot; in window 1
    end if
    do script &amp;quot;jekyll --server --auto&amp;quot; in window 1
    delay 2
    do shell script &amp;quot;open http://0.0.0.0:4000&amp;quot;
end tell&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='push_jekyll_post_to_github'&gt;Push Jekyll post to Github&lt;/h3&gt;

&lt;p&gt;通过 AppleScript 在 Terminal 中将生成的网站复制到新地址，并将新地址下的内容上传到 Github。之所以复制是因为 Github Pages 不支持插件，只能上传生成的网站，如果你不需要这个步骤，将下面的 &lt;code&gt;if&lt;/code&gt; 语句删除即可。同样需要替换成自己的 Jekyll 文件夹路径。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;on alfred_script(message)
  tell application &amp;quot;Terminal&amp;quot;
    activate

    if (count of windows) is 0 then
        set currentTab to do script &amp;quot;cp -a ~/dropbox/websites/jekyll/_site/. ~/dropbox/websites/p233.github.com/&amp;quot;
    else
        do script &amp;quot;cp -a ~/dropbox/websites/jekyll/_site/. ~/dropbox/websites/p233.github.com/&amp;quot; in window 1
    end if
    
    do script &amp;quot;cd ~/dropbox/websites/p233.github.com/&amp;quot; in window 1
    do script &amp;quot;git add .&amp;quot; in window 1
    do script &amp;quot;git commit -am '&amp;quot; &amp;amp; message &amp;amp; &amp;quot;'&amp;quot; in window 1
    do script &amp;quot;git push&amp;quot; in window 1
end tell
end alfred_script&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>关于 Css Transition 的一切</title>
      <link>http://p233.github.com/Css/2013/01/06/css-transitions.html</link>
      <pubDate>06 Jan 2013</pubDate>
      <author>40132147@qq.com (Peter)</author>
      <guid>http://p233.github.com/Css/2013/01/06/css-transitions</guid>
      <description>&lt;p&gt;刚刚读到的文章，非常不错，翻译出来与大家分享。原文 &lt;a href='http://blog.alexmaccaw.com/css-transitions' target='_blank'&gt;All you need to know about Css Transitions&lt;/a&gt; 由 Alex Maccaw 发表于 2013 年 1 月 3 日。不想花太多时间纠结于字面翻译，只专注最核心的信息，Javascript 入门水平，因此后半部分理解不深入，详细信息还请读原文，翻译不当的地方请大家指正。&lt;/p&gt;

&lt;h3 id='id2'&gt;浏览器支持&lt;/h3&gt;

&lt;p&gt;几乎所有版本的 Firefox, Safari, Chrome 以及最新的 IE10 都支持 transition 属性。动画与渐变特效在 Safari 和 Chrome 下仍然需要添加 &lt;code&gt;-webkit&lt;/code&gt; 前缀，不过很快也会不需要了。&lt;/p&gt;

&lt;h3 id='_transition_'&gt;使用 transition 属性&lt;/h3&gt;

&lt;p&gt;Transition 属性使用最多的地方要数 css 伪类了，比如 &lt;code&gt;:hover&lt;/code&gt;。使用时指定变化的属性名，变化时间，以及变化样式。例如&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;.element {
  height: 100px;
  transition: height 2s linear;
}

.element:hover {
  height: 200px;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;当 &lt;code&gt;:hover&lt;/code&gt; 伪类被激活时，&lt;code&gt;.element&lt;/code&gt; 的高度在 2 秒钟的时间内从 &lt;code&gt;100px&lt;/code&gt; 线性（linear）变化为 &lt;code&gt;200px&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;浏览器默认变化属性为 &lt;code&gt;all&lt;/code&gt; （全部属性），变化样式为 &lt;code&gt;ease&lt;/code&gt;，因此如果没特殊要求，只需定义变化的时间。&lt;/p&gt;

&lt;p&gt;使用 js 添加、移除 class 要比使用伪类更方便，因为后者必须用户激活后才能触发。下面的例子里用到了两个变化效果，都是通过 js 触发的。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;.element {
  opacity: 0.0;
  transform: scale(0.95) translate3d(0,100%,0);
  transition: transform 400ms ease, opacity 400ms ease;
}

.element.active {
  opacity: 1.0;
  transform: scale(1.0) translate3d(0,0,0);
}

.element.inactive {
  opacity: 0.0;
  transform: scale(1) translate3d(0,0,0);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;var active = function(){
  $('.element').removeClass('inactive').addClass('active');
};

var inactive = function(){
  $('.element').removeClass('active').addClass('inactive');
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id3'&gt;渐变背景的变化&lt;/h3&gt;

&lt;p&gt;不是所有的 css 属性都可以变化，而且只能从一个绝对值变化到另一个绝对值。比如，&lt;code&gt;height&lt;/code&gt; 不能从 &lt;code&gt;0px&lt;/code&gt; 变化到 &lt;code&gt;auto&lt;/code&gt;（补充：不同单位之间也可以变化，比如从 &lt;code&gt;0px&lt;/code&gt; 变化到 &lt;code&gt;10em&lt;/code&gt;，但不可以从 &lt;code&gt;0px&lt;/code&gt; 变化到 &lt;code&gt;10%&lt;/code&gt;），可变化的属性列表请参考&lt;a href='http://oli.jp/2010/css-animatable-properties/' target='_blank'&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;还有，只有纯色背景可以变化，带有渐变效果的背景却不可以，没有任何技术原因不支持，只是浏览器还需要些时间支持这些特效。不过，还是有几种变通办法的：&lt;/p&gt;

&lt;p&gt;第一种，渐变颜色采用有透明度的 rgba，然后变化 &lt;code&gt;background-color&lt;/code&gt; 背景颜色，如下：&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;.panel {
  background-color: #000;
  background-image: linear-gradient(rgba(255, 255, 0, 0.4), #FAFAFA);
  transition: background-color 400ms ease;
}

.panel:hover {
  background-color: #DDD;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果渐变样式是连续的，还可以通过 &lt;code&gt;background-position&lt;/code&gt; 属性移动它，&lt;a href='http://sapphion.com/2011/10/css3-gradient-transition-with-background-position/' target='_blank'&gt;例子&lt;/a&gt;。或者，创建两个元素叠加，控制上面一层的透明度。如下：&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;.element {  
  width: 100px;  
  height: 100px;  
  position: relative;
  background: linear-gradient(#C7D3DC,#5B798E);    
}  

.element .inner { 
  content: '';
  position: absolute;
  left: 0; top: 0; right: 0; bottom: 0;
  background: linear-gradient(#DDD, #FAFAFA);          
  opacity: 0;
  transition: opacity 1s linear;
}

.element:hover .inner {
  opacity: 1;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;但是，这样需要额外的标签，上一层的元素也会获取鼠标事件。所以，如果这里能用 &lt;code&gt;:before&lt;/code&gt;，&lt;code&gt;:after&lt;/code&gt; 伪类是最理想的，可惜目前只有 Firefox 支持伪类变化。Eliott Sprehn 正在努力让 webkit 也支持伪类变化，这一功能很快也会在 Safari Chrome 上实现。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;更新：&lt;/strong&gt;这个问题现在已经解决，目前 Firefox，Chrome 支持伪类变化，Safari 会在下一个版本中更新，Opera 目前还不支持，IE10 也支持，但有点奇特，要用下面的方式 (Source: &lt;a href='http://css-tricks.com/pseudo-element-animationstransitions-bug-fixed-in-webkit/' target='_blank'&gt;CSS-Tricks&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;.x:hover:before { /* By itself, doesn't work */ }

.x:hover {} 
.x:hover:before { /* This works (needs :hover declared) */ }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id4'&gt;硬件加速&lt;/h3&gt;

&lt;p&gt;变化某些属性，比如 &lt;code&gt;left&lt;/code&gt; ，&lt;code&gt;margin&lt;/code&gt;，&lt;em&gt;浏览器会重新计算每一帧的显示效果&lt;/em&gt;，这严重影响速度，尤其是在移动设备上。解决办法就是让 GPU 来做这些运算，简单的说，就是将元素转化为图片再制作变化效果，而不是重新计算每一帧的 css 样式。最简单的一个使用硬件加速的办法就是用 &lt;code&gt;transform: translate3d(0,0,0);&lt;/code&gt; 属性。&lt;/p&gt;

&lt;p&gt;不过，这并不是个完美解决方法，同时会带来一些弊端，所以要有选择的使用硬件加速，不要用的太多。其中一项弊端是，字体在变化时会 lose weight （大家应该感觉到了，变化过程中字体很细，变化完毕后突然加粗，即便没有使用粗体），原因就是硬件加速过程中不会对字体启用抗锯齿特效，避免这个问题只能禁用 &lt;code&gt;font-smoothing: antialiased;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;此外，不用的浏览器使用不同的硬件加速库，有浏览器差异。如果遇到不同浏览器中显示的变化效果不同，不要使用通用的 &lt;code&gt;transform3d()&lt;/code&gt; 设置，给不同浏览器不同的变化参数。&lt;/p&gt;

&lt;h3 id='clipping'&gt;Clipping&lt;/h3&gt;

&lt;p&gt;为了让 GPU 更好的运算变化效果，要避免使用像 &lt;code&gt;width&lt;/code&gt; 这样需要重新计算每一帧样式的属性，而用 clipping（术语，only drawing things that will be visible to the viewer）。下面的例子将一个搜索框拉宽，使用 &lt;code&gt;translate3d&lt;/code&gt; 属性令元素在 X 轴上拉长，而不是用 &lt;code&gt;width&lt;/code&gt;，这样每一帧都不会重新计算元素的宽度，速度更快，效果更流畅：&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;.clipped {
  overflow: hidden;
  position: relative;
}

.clipped .clip {
  right: 0px;
  width: 45px;
  height: 45px;
  background: url(/images/clip.png) no-repeat
}

input:focus {
  -webkit-transform: translate3d(-50px, 0, 0);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id5'&gt;时间函数&lt;/h3&gt;

&lt;p&gt;浏览器内置的时间函数包括 &lt;code&gt;linear, ease, ease-in, ease-out and ease-in-out&lt;/code&gt;，复杂一点，可以用 cubic-bezier 曲线自定义时间函数，比如 &lt;code&gt;transition: -webkit-transform 1s cubic-bezier(.17,.67,.69,1.33);&lt;/code&gt; 。两个帮你选择时间函数的工具 &lt;a href='http://easings.net' target='_blank'&gt;Pre-defined Curves&lt;/a&gt; 和 &lt;a href='http://cubic-bezier.com/#.17,.67,.83,.67' target='_blank'&gt;Graphing Tool&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id='id6'&gt;用程序控制变化效果&lt;/h3&gt;

&lt;p&gt;借助 js 可以更有效的控制变化的效果，例如将连续的变化做成动画。变化属性为 &lt;code&gt;all&lt;/code&gt; 时意味着元素的所有属性都可以同时发生变化，请看下面的例子&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;var defaults = {
  duration: 400,
  easing: ''
};

$.fn.transition = function (properties, options) {
  options = $.extend({}, defaults, options);
  properties['webkitTransition'] = 'all ' + options.duration + 'ms ' + options.easing;
  $(this).css(properties);
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后用 jQuery 函数 &lt;code&gt;$.fn.transition&lt;/code&gt; 调用变化样式&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;$('.element').transition({background: 'red'});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='_callback'&gt;获取变化结束的 callback&lt;/h3&gt;

&lt;p&gt;组合多个 transitions 首先要知道变化在什么时间结束，webkit 浏览器中可以监视 &lt;code&gt;webkitTransitionEnd&lt;/code&gt; 事件，其他浏览器需要先用 &lt;a href='https://gist.github.com/4414792' target='_blank'&gt;这个&lt;/a&gt; 找出事件名称。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;var callback = function () {
  // ...
}

$(this).one('webkitTransitionEnd', callback)
$(this).css(properties);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;有时也许不工作，比如属性没有变化，或者没有被激活，确保每次都能得到一个 callback，要设定 timeout 手动激活事件。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;$.fn.emulateTransitionEnd = function(duration) {
  var called = false, $el = this;
  $(this).one('webkitTransitionEnd', function() { called = true; });
  var callback = function() { if (!called) $($el).trigger('webkitTransitionEnd'); };
  setTimeout(callback, duration);
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;现在可以调用 &lt;code&gt;$.fn.emulateTransitionEnd()&lt;/code&gt; 确保变化结束的 callback 被激活。&lt;/p&gt;

&lt;h3 id='id7'&gt;连续的变化&lt;/h3&gt;

&lt;p&gt;熟悉用 js 调用变化，与获取变化结束的 callback 后，可以进一步将变化进行排列，做成连续的动画。jQuery 提供了两个对列相关的函数 &lt;code&gt;$.fn.queue(callback)&lt;/code&gt; 与 &lt;code&gt;$.fn.dequeue()&lt;/code&gt;。先将 css 变化样式写入 &lt;code&gt;$.fn.queue&lt;/code&gt; callback 中，变化结束后调用 &lt;code&gt;$.fn.dequeue&lt;/code&gt;。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;var $el = $(this);
$el.queue(function(){
  $el.one('webkitTransitionEnd', function(){
    $el.dequeue();
  });
  $el.css(properties);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个例子很简单，再复杂一点，用 &lt;code&gt;delay()&lt;/code&gt; 函数做成一个连续在一起的动画效果。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;$('.element').transition({left: '20px'})
             .delay(200)
             .transition({background: 'red'});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id8'&gt;重绘&lt;/h3&gt;

&lt;p&gt;在使用 &lt;code&gt;transition&lt;/code&gt; 属性时，要写两套 css 属性，初始样式与结束样式。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;$('.element').css({left: '10px'})
             .transition({left: '20px'});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然而，如果同时设定了两套样式，紧连在一起，浏览器试着完善属性之间的变化，却会忽略初始样式并放弃变化。在后台，浏览器其实是分批更新变化样式的，这样会加快速度，但有时也有不利的影响（注，这一段没有经验，不保证翻译的准确度）。&lt;/p&gt;

&lt;p&gt;解决办法是利用 DOM 元素的 &lt;code&gt;offsetHeight&lt;/code&gt; 属性让浏览器在两套样式之间重绘元素，例如：&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;$.fn.redraw = function(){
  $(this).each(function(){
    var redraw = this.offsetHeight;
  });
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个方法在大多数浏览器下都工作正常，但在 Android 下还不够，使用 timeout 或者激活一个 class。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;$('.element').css({left: '10px'})
             .redraw()
             .transition({left: '20px'});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='transition_'&gt;Transition 的未来&lt;/h3&gt;

&lt;p&gt;W3C 的 &lt;a href='https://dvcs.w3.org/hg/FXTF/raw-file/tip/web-anim/index.html' target='_blank'&gt;新草案&lt;/a&gt; 包含新的 Javascript API 应对现在的局限性，给开发者更灵活的空间。根据新的 API，可以同步动画，自定义时间函数，获取 callbacks，实在是令人期待的新功能。&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;var anim = new Animation(elem, { left: '100px' }, 3);
anim.play();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;另外，可以在 &lt;a href='https://github.com/web-animations/web-animations-js' target='_blank'&gt;这里&lt;/a&gt; 找到一些实现新 API 的变通法子。&lt;/p&gt;

&lt;h3 id='id9'&gt;结尾&lt;/h3&gt;

&lt;p&gt;目前为止，希望你已经深入的了解了 css 的 transition 属性，以及如何组合简单的 API 制作丰富的动画效果。文中大多数 js 例子来源于 &lt;a href='https://github.com/maccman/gfx' target='_blank'&gt;GFX&lt;/a&gt;，这也是本文作者 Alex 写的一个 jQuery Css transition 库。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关注 Css 性能 (一)</title>
      <link>http://p233.github.com/Css/2013/01/05/css-performance.html</link>
      <pubDate>05 Jan 2013</pubDate>
      <author>40132147@qq.com (Peter)</author>
      <guid>http://p233.github.com/Css/2013/01/05/css-performance</guid>
      <description>&lt;p&gt;虽然我只会写最简单的页面，但本着“取法乎上，得乎其中”的原则，一直关注 Css 性能，读过几篇相关文章，准备逐步翻译出来当做总结与积累。第一篇 &lt;a href='http://boagworld.com/dev/why-you-should-care-about-css-page-performance/' target='_blank'&gt;Why you should care about CSS page performance&lt;/a&gt; 由 Doug Stewart 发表于 2012 年 5 月。只记录下几点重要的信息，没有直接翻译，理解不当的地方还请大家指正。&lt;/p&gt;

&lt;p&gt;Doug 介绍了自己测试 css 性能的两个方法：缩放浏览器窗口与上下滚动页面。浏览器重绘页面可以反映很多关于性能的问题，未添加 css 的页面反应速度肯定是最快的。一般来说，&lt;em&gt;如果页面缩放时有明显延时，很可能是布局问题，比如浮动、流体宽度等等，而如果页面滚动时有明显延时，则可能是特效问题，比如说阴影与渐变。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;优化 css 性能，自然要先找到问题出在哪里。作者介绍了三款衡量页面性能的工具：&lt;a href='https://github.com/andyedinborough/stress-css' target='_blank'&gt;Css Stress Test&lt;/a&gt;，Chrome Developer Tools 的 Profiles 与 Timeline。就不一一介绍这些工具了，原则上是要找出最耗时间的地方，然后将其优化。&lt;/p&gt;
&lt;p class='noindent'&gt;几点关于 Css 性能的小提示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大家都知道 id 选择器的表现效果要优于 class，事实虽然也如此，但仅仅是非常微小的差别，几乎可以不予考虑；&lt;/li&gt;

&lt;li&gt;Css3 属性往往是影响页面性能的罪魁祸首，尤其是 &lt;code&gt;animation&lt;/code&gt; 与 &lt;code&gt;@font-face&lt;/code&gt;，谨慎地使用；&lt;/li&gt;

&lt;li&gt;现代浏览器支持 Javascript 与 Flash 硬件加速，却不支持 Css，webkit 有优化功能，但还是受限的；&lt;/li&gt;

&lt;li&gt;移动平台的情况是，即便现在最先进的手机也不及 10 年前最先进的电脑;&lt;/li&gt;

&lt;li&gt;人脑有大约 80 毫秒的反应时间，优化页面性能时不要在一些细枝末节的地方花太多精力，专注于拖慢严重的地方。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; 留言回复 Javascript 其实没有硬件加速，Safari mobile 使用 GPU 运算 animations 与 3D 特效。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSS 判断浏览器方法整理</title>
      <link>http://p233.github.com/Css/2013/01/04/Browser-Specific-Hacks.html</link>
      <pubDate>04 Jan 2013</pubDate>
      <author>40132147@qq.com (Peter)</author>
      <guid>http://p233.github.com/Css/2013/01/04/Browser-Specific-Hacks</guid>
      <description>&lt;p&gt;整理几个常用的判断浏览器的方法，记录在这里方便查阅。不算全面，以后遇到问题了再来更新。&lt;/p&gt;

&lt;h3 id='conditional_comments'&gt;Conditional Comments&lt;/h3&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;!--[if IE]&amp;gt;
  According to the conditional comment this is IE
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if IE 6]&amp;gt;
  According to the conditional comment this is IE 6
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if IE 7]&amp;gt;
  According to the conditional comment this is IE 7
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if IE 8]&amp;gt;
  According to the conditional comment this is IE 8
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if IE 9]&amp;gt;
  According to the conditional comment this is IE 9
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if gte IE 8]&amp;gt;
  According to the conditional comment this is IE 8 or higher
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if lt IE 9]&amp;gt;
  According to the conditional comment this is IE lower than 9
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if lte IE 7]&amp;gt;
  According to the conditional comment this is IE lower or equal to 7
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if gt IE 6]&amp;gt;
  According to the conditional comment this is IE greater than 6
&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if !IE]&amp;gt; --&amp;gt;
  According to the conditional comment this is not IE
&amp;lt;!-- &amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p class='noindent'&gt;Source: &lt;a href='http://www.quirksmode.org/css/condcom.html' target='_blank'&gt;http://www.quirksmode.org/css/condcom.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id='target_ie'&gt;Target IE&lt;/h3&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;p {
  color: red; /* All browsers */
  color: red\9; /* IE8 and below */
  *color: red; /* IE7 and below */
  _color: red; /* IE6 */  
}

/* Target IE 10 */
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
  p {
    color: red;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='target_safari_and_chrome'&gt;Target Safari and Chrome&lt;/h3&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;@media screen and (-webkit-min-device-pixel-ratio:0) {
  p {
    color: red;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='target_firefox'&gt;Target Firefox&lt;/h3&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;@-moz-document url-prefix() {
  p {
    color: red;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='target_opera'&gt;Target Opera&lt;/h3&gt;
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-css'&gt;x:-o-prefocus, p {
  color: red;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>用 Dropbox 同步 Mac 软件设置</title>
      <link>http://p233.github.com/Mac_OS/2013/01/03/sync-application-preferences.html</link>
      <pubDate>03 Jan 2013</pubDate>
      <author>40132147@qq.com (Peter)</author>
      <guid>http://p233.github.com/Mac_OS/2013/01/03/sync-application-preferences</guid>
      <description>&lt;p&gt;常常在台式机与笔记本电脑之间切换着工作，通过 Dropbox 同步文件很方便，偶尔会想到如果软件设置也可以同步就更美妙了。某个周末花了些时间搜集、整理了一些方法，在此分享出来。不必非用 Dropbox 不可，Google Drive 等类似服务应该也可以，只是一直使用 Dropbox 比较熟悉。如果不想麻烦，可以试试 &lt;a href='http://joeworkman.net/blog/post-9591023714' target='_blank'&gt;DropboxAppSync&lt;/a&gt; 这款软件，和下面介绍到的原理是一样的，都是通过创建 symlink 将设置文件链接到 Dropbox。&lt;/p&gt;

&lt;h3 id='_sublime_text_2'&gt;同步 Sublime Text 2&lt;/h3&gt;

&lt;p&gt;Sublime Text 2 所有的设置文件、插件都存放在 Packages 文件夹下，这是一项非常重要的设定，因为 Mac OS, Windows, Linux 三个平台之间因此可以相互同步，并且包括所有的插件！以下仅以 Mac OS 做介绍。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关闭 Sublime Text 2；&lt;/li&gt;

&lt;li&gt;在要同步的主机上找到 Sublime Text 2 的 packages 文件夹（路径：&lt;code&gt;~/Library/Application Support/Sublime Text 2/&lt;/code&gt;），将其移动到 Dropbox 文件夹内，例如 &lt;code&gt;~/Dropbox/Sync/Packages&lt;/code&gt;；&lt;/li&gt;

&lt;li&gt;启动 Terminal，输入 &lt;code&gt;cd ~/Library/Application\ Support/Sublime\ Text\ 2/&lt;/code&gt; 打开目标文件夹（空格前要加 &lt;code&gt;\&lt;/code&gt;），然后输入 &lt;code&gt;ln -s ~/Dropbox/Sync/Packages&lt;/code&gt; 创建一个 symlink 将 Dropbox 下的 Packages 文件夹链接到当前目录，Windows 下创建 symlink 的命令请看&lt;a href='http://technet.microsoft.com/en-us/library/cc753194(v=ws.10).aspx' target='_blank'&gt;这里&lt;/a&gt;；&lt;/li&gt;

&lt;li&gt;在第二台机器上，关闭 Sublime Text 2，找到 packages 文件夹并将其删除，然后重复步骤 3 中的命令。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id1'&gt;同步其他软件&lt;/h3&gt;

&lt;p&gt;Mac OS 下软件的设置文件都会以 .plist 的格式保存在 &lt;code&gt;~/Library/Preferences/&lt;/code&gt; 下，只要给这些文件创建 symlink 就可以完成同步。有些软件除了 .plist 外，还会在 &lt;code&gt;~/Libray/Application Support/&lt;/code&gt; 下创建文件夹存储额外的设置，比如 Alfred 会创建一个文件夹存储 extensions，TextMate 会创建一个文件夹存储 Bundles 与 Themes，给这些文件夹创建 symlink 可以完成更彻底的同步。&lt;em&gt;但是，并不是所有的软件都允许同步这些文件夹&lt;/em&gt;，有些软件会删除 symlink 重新写入文件，而不是按照 symlink 找到位于 Dropbox 下的文件。已经同步的软件如果更新，则不会影响到 symlink。&lt;/p&gt;

&lt;h3 id='_mac_os_keychain'&gt;同步 Mac OS Keychain&lt;/h3&gt;

&lt;p&gt;除了软件设置外，Mac OS 还有一样可以同步，就是 Keychain。如果你的两台 Mac 之间经常共用一套密码，同步 Keychain 会是一个很不错的选择，即便不是，把 Keychain 存储到 Dropbox 重装新系统也会保留这些密码。此外，FTP 软件普遍将登陆信息存储进 Keychain，只同步 .plist 文件是没有效果的，一定要同步 Keychain。&lt;/p&gt;

&lt;p&gt;同步方法：将 &lt;code&gt;~/Library/Keychains/&lt;/code&gt; 下的 login.keychain 文件移动到 Dropbox 文件夹下；启动 Keychain Access，选择 File &amp;gt; Add Keychain…，然后添加位于 Dropbox 下的 login.keychain 文件；在第二台电脑上删除本地的 login.keychain 文件，然后重复 File &amp;gt; Add Keychain…。同步 Keychain 后，重启电脑偶尔会被要求输入密码，验证 Keychain 的管理权限。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这是我的 Dropbox 推广链接 &lt;a href='http://db.tt/dKXdR3gf' target='_blank'&gt;http://db.tt/dKXdR3gf&lt;/a&gt;，通过这个链接注册 Dropbox 账户，我们每个人都可以获得额外的 500MB 空间 :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;最后，不要在两台电脑上同时运行同步的软件，会因为文件冲而突丢失设置。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>开始在 Github 上写博客</title>
      <link>http://p233.github.com/Uncategorised/2013/01/02/blogging-with-jekyll.html</link>
      <pubDate>02 Jan 2013</pubDate>
      <author>40132147@qq.com (Peter)</author>
      <guid>http://p233.github.com/Uncategorised/2013/01/02/blogging-with-jekyll</guid>
      <description>&lt;p&gt;纪念刚刚过去的 2012 年，展望 2013，开始用时下流行的 Jekyll 在 Github 上写博客，积累经验，深度思考，期望在新的一年取得更好的成绩。&lt;/p&gt;

&lt;p&gt;网络上关于 Jekyll 的文章已经非常详细了，在这里附上一点使用 Jekyll 的经验心得，也许能方便刚刚开始接触 Jekyll 的同学。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;门槛：需要理解 Github 的工作方式，熟悉 Github 客户端，熟悉 Html 与 Css；&lt;/li&gt;

&lt;li&gt;不妨一边写静态模板，一边了解 Jekyll 布局所用到的 &lt;a href='https://github.com/mojombo/jekyll/wiki/Liquid-Extensions' target='_blank'&gt;Liquid Tag&lt;/a&gt;，磨刀不误砍柴工；&lt;/li&gt;

&lt;li&gt;Jekyll 博客，其实是一套文件结构，然后通过 Jekyll 程序（无图形操作界面）编译成静态网站。如果不熟悉命令，完全可以不安装 Jekyll，只需按照&lt;a href='https://github.com/mojombo/jekyll/wiki/usage' target='_blank'&gt;要求的格式&lt;/a&gt;创建文件后再上传到 Github，访问主页就可以了，因为 Github Pages 便是由 Jekyll 驱动的，或者直接使用 &lt;a href='http://jekyllbootstrap.com' target='_blank'&gt;Jekyll-Bootstrap&lt;/a&gt; 的结构；&lt;/li&gt;

&lt;li&gt;Jekyll 的文件结构大概可以这样分：配置文件（_config.yml），布局文件（_layouts），模块文件（_includes），插件（_plugin），文章（_posts），其他文件（不以&lt;em&gt;下划线&lt;/em&gt;开头的文件及文件夹都会完整的拷贝到生成的静态网站中，比如 css 文件、图片等），以及生成的网站（_site）；&lt;/li&gt;

&lt;li&gt;Jekyll 命令的用法很简单，先通过 &lt;code&gt;cd&lt;/code&gt; 命令打开目标文件夹，然后输入 &lt;code&gt;jekyll --server&lt;/code&gt; 生成网站，浏览器中输入 &lt;code&gt;0.0.0.0:4000&lt;/code&gt; 访问生成的静态网站，&lt;code&gt;jekyll --server --auto&lt;/code&gt; 命令开启实时更新，修改文件后在浏览器中刷新就可看到效果，对本地调试很有帮助；&lt;/li&gt;

&lt;li&gt;Github Pages 禁用所有插件，需要使用插件功能，只能上传生成的网站文件夹（_site），熟悉命令也可以试试&lt;a href='http://edhedges.com/blog/2012/07/30/jekyll-with-plugins-hosted-on-github-pages/' target='_blank'&gt;这个办法&lt;/a&gt; ;&lt;/li&gt;

&lt;li&gt;想写草稿不想被编译？创建一个以下划线开头文件夹就会被忽略，例如在 _posts 下创建 _drafts 存储草稿。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='jekyll_alfred_extensions'&gt;Jekyll Alfred Extensions&lt;/h3&gt;

&lt;p&gt;三个 Alfred Extensions 让 Jekyll 用起来更方便：Create a Jekyll Post, Generate Jekyll site, 以及 Push Jekyll post to Github。&lt;a href='/Mac_OS/2013/01/08/jekyll-alfred-extensions.html'&gt;点击这里访问&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    

  </channel> 
</rss>